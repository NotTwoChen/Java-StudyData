一.DDL语句整理:
创建表:
create table 表名(列名1 列类型1,列名2 列类型2,...)/
删除表:
drop table 表名/
修改公式:
alter table 表名 + 要做的事情/
修改表名:
alter table 表名 rename to 新表名/
修改列名:
alter table 表名 change 原列名 新列名 列类型/
修改列类型:
alter table 表名 modify 列名 列新的类型/
增添列:
alter table 表名 add (列名1 列类型1,列名2 列类型2,...)
删除列:
alter table 表名 drop 列名/
二.DML语句整理:
插入数据:
INSERT INTO 表名(列名1,列名2,列名3) VALUES(对应列名1的值1,对应列名2的值2,对应列名3的值3);

INSERT INTO 表名 VALUES(对应第一列的值1,对应第二列的值二,....,对应最后一列的值n);--表中一共有n列
修改数据:
--下面写法会将所有数据的列名1这一列的数据,都修改为值1
UPDATE 表名 SET 列名=要修改的值;--如果类型为字符型,则需要用单引号:'要修改的值'
UPDATE 表名 SET 列名1='值1',列名2='值2';

--上述修改自然是很尴尬的,所以应该有选择的去修改数据
--为修改语句增加条件
UPDATE 表名 SET 列名3='值3' where id=2;--将id为2的那一行的数据的'列名3'这一列的数据修改为'值3'
删除数据:
--下面写法会将表名1中的数据都删除
DELETE FROM 表名1;

--为上述语句增加条件
DELETE FROM 表名1 where id=2;--将id为2的那一行数据删除
三.DQL基础语句整理
公式:
select 查询哪些列
FROM 从哪些表中查
where 查询条件
GROUP BY 按照哪个列分组
having 分组后的条件
ORDER BY 根据哪一列排序
列运算相关:
--查询两列之间数据的加减乘除结果集
select 列名1+列名2, 列名3-列名4, 列名5*列名6, 列名7/列名8 from 表名
去重:
--关键字distinct可以将查询结果中完全相同的数据去除
select distinct 列名 from 表名;
模糊查询:
模糊查询的关键字为: like

--字符短线:-  代表一个任意值的字符
--字符百分号:%  代表任意数量的任意值的字符
--字符星号:*  代表查询所有列
select * from 表名 where
name like '张%' --查询姓张的
or        --或
name like '___'; --查询名字由三个字符组成的
排序:
根据id升序排序
ORDER BY id ASC;
根据id降序排序
ORDER BY id DESC;

根据列x升序排序,如果x相同则根据y降序排序
ORDER BY x ASC, y DESC;
关于null与0:
1,任何与null做的运算(加减乘除等等)结果都为null.
2,concat('hello',列n);列n的值如果为null,则该函数的结果也是null.
3,如果将字符与数字做运算,那么字符会被当成0看待,无法转换成数字的都会被当成0.
4,ifnull(列n,值m);如果列n的值为null,该函数可以将null替换成m使用(并不改变表中的数据).
四.DQL聚合函数整理:
聚合函数一共有五个:求数据总个数,求数据值的总和,求数据中的最大值\最小值,求数据的平均值
count(列名):
--查询表中的数据总数(如果某一行的数据都为null,则不会计算)
select count(*) from 表;

--下面这句与上面那句的区别在于:如果第二行name列为null,而其他列有值,上一条语句会计算第二行,而这一条语句不会
select count(name) from 表;
sum(列名):
--取x列数据的总和
select sum(x) from 表;
max(列名)与min(列名):
--取x列的最大值和y列的最小值
select max(x),min(y) from 表;
avg(列名):
--取age列的平均值
select avg(age) from 表;
五.SQL分组查询整理:
一般见到每组,每班,每部门,每科室等词汇,基本就是要使用分组查询了.

--以列名x列分组,查询该列信息及分组后的每组的数量
select 列名x,count(列名x) from 表名 GROUP BY 列名x;
在分组之前的条件用where,分组之后的条件用having,看上方公式顺序
六.备份数据库与恢复数据库:
备份与恢复的都是数据库中的每个表,如果该数据库不存在需要先建立数据库.
--在登录之前,注意该语句后面不能写分号
--看箭头的方向,箭头的方向就代表数据的传输方向
--这句话就是在将数据库中的表信息传输到文件中存起来
--备份
mysqldump -u用户名 -p密码 数据库名>目标文件(绝对路径,文件后缀名为.sql)

--根据箭头的方向可以看出,这句话是将表信息从文件中传输到数据库中
--此语句后面也不能写分号
--恢复
--恢复数据时,如果对应数据库不存在,则需要先建立数据库
mysqldump -u用户名 -p密码 数据库名<目标文件(绝对路径)

--登录之后的恢复操作可以使用以下语句
--先进入要恢复数据的数据库
use 数据库名;
--在恢复数据
source 备份文件路径
七.一次性备份所有数据库:
无需登录，直接输入以下语句即可，注意：语句后面没有分号

--将数据库信息备份成一个sql文件
mysqldump -u用户名 -p --all-databases>sqlfile.sql
将sql文件，恢复到数据库中，这句是有分号的

source 文件路径;
八.约束:
在日常生活中,偶尔也会说一句,受他约束,也就是被他管着的意思.
这里的约束,是作用在列上的,也就是去束缚着一列,管着这一列,让这一列的数据都满足我们给它加上的约束,那么被约束的列也就有了一定的特性.
比如我约束你不让你吃饭,那你就什么都可以干就是不能吃饭.
如果约束列a不能为null,那么列a也就可以为任何值但是不能为null.

1,主键约束

被主键约束的列的特点:
1)非空:列中的值不能为null
2)唯一:这一列中,每一行的值不能重复. 3)被引用:可以通过引用主键的方式,引用改行的数据(主键就代表了这一行)

--添加主键的方法:
--在创建表时添加主键的两种方式

create table 表名(列名1 列类型1 primary key, 列名2 列类型2);

create table 表名(列名1 列类型1, 列名2 列类型2, primary key(列名1));

--创建表后,若要为某一列设置主键约束
ALTER table 表名 add primary key(列名);

--删除主键:
ALTER table 表名 drop primary key;
注:主键在一张表中最多存在一个,但是可以将多个列一起设为主键
所以说主键并不一定就表示一列.

--设置多个列为主键
ALTER table 表名 add primary key(列名1,列名2,列名3);

--但是如果已经设置过主键了,在设置主键的话就会报错提示主键重复定义

-- 如果在建表的时候主键没有设置自增长,在建表完后,想要将主键设置为自增长,可用下面语句
ALTER TABLE 表名  MODIFY COLUMN 列名 int(11) NOT NULL AUTO_INCREMENT;
2,主键自增长约束

关键字:auto_increment
注:关键字auto_increment不能单独使用,必须与主键一同使用
若不指定主键的值,则自增长会生效.
若删除了id为3这一行数据,再增添数据时,id会从4开始使用,不会再使用3.
若id已经使用到4了,这时候添加了一个数据,指定id为7,再次添加数据id为null时,id会从8开始使用.

3,非空约束

--not null 即为非空约束
create table 表名(id int primary key auto_increment,name char(50) not null);
4,唯一约束

--union 即为唯一约束
create table 表名(id int primary key,name char(50) unique);
注:即使设置某一列为非空,唯一,也不能在其他表中将该列作为外键引用
九.外键约束:
1,多对一或一对多关系

当表1与表2有关联时,如果表1是从表,表2是主表时,可以通过外键约束,在表1中引用表2的主键.
何时为主表何时为从表.
多对一或一对多关系下,多的为从表,一的为主表.
比如:有一个班级表,有一个学生表,多个学生对应一个班级,这时候班级表就是主表,学生表就是从表.
比如:有一个部门表,有一个员工表,多个员工对应一个部门,这时候部门表就是主表,员工表就是从表.

当表1引用表2的主键时,表1该列下的数据必须是表2主键列中已存在的数据.
注: 表1引用表2添加约束时的列名与表2的主键列名不是一定要一致的. 注意这里引用的都是主键,而不是一行记录.

--指定外键的两种方式
--如果表1想指定表2的主键为外键,需要先存在表2
create table 表2(表2id int primary key auto_increment,表2name varchar(50));

--方式一:在创建表时指定外键
--fk_表2id是约束的名字,fk表示:foreign key 也就是外键
create table 表名(
  id int primary key auto_increment,
  name char(50),
  ddd int,
  constraint fk_表2id foreign key(ddd) references 表2(表2id)
);

--方式二:在创建表后,通过修改ddl语句添加外键约束
alter table 表名 add constraint fk_表2id foreign key(ddd) references 表2(表2id);
2,一对一关系

给表1的主键,加上表2的外键约束.
这样表1的主键(一般为id)与表2的主键(一般为id)就会被约束,结果就是表1中有的id在表2中一定有,表2中没有的id,是不能添加进表1中的.
例子:一夫一妻制

--建立丈夫表:husband
create table husband(
  hid int primary key auto_increment,
  hname varchar(50)
);

--建立妻子表:wife,并且给妻子表的主键指定丈夫表的外键约束
create table wife(
  wid int primary key auto_increment,
  wname varchar(50),
  constraint fk_wife_husband foreign key(wid) references husband(hid)
);
3,多对多关系

一个老师可以教很多学生,一个学生也可以有很多老师,这就是多对多关系.
多对多关系需要使用到中间表.
有几张表,就要在中间表中建立几个外键.
十.多表查询:
合并结果集

结果集,就是通过select..from...查询出来的数据,查出来的数据实际也是一张表,也就是说结果集也就是一张表.

--两个select语句中间通过关键字:union连接即可
select a,b from 表1  --语句1
union -- ALL  如果加上all,则不会去重
select c,d from 表2; --语句2
--如果语句1查询出的结果集(就是查出的那个数据表)的结构(列的数量,列的类型)与语句2查询出的结果集一样,那么上述语句会执行成功.
--结果会将表1的结果集与表2的结果集纵向拼接
连接查询

有一个概念叫笛卡尔积,在多表查询时,都会去除笛卡尔积.
笛卡尔积概念
去除的方法是在多表查询时加上一个条件:从表.外键列=主表.主键列

内连接

--mysql的方言:
select * from 表名1 别名1,表名2 别名2 where 别名1.xx=别名2.yy;
--如果表名1为从表,则xx为外键约束的列名,yy为主键列名

--sql标准写法:
select * from 表名1 别名1 inner join 表名2 别名2 on 别名1.xx=别名2.yy;

--自然连接:(这种格式的名称要自然....)
--自然连接会自动找到两表中列名相同的列做比较(也就是说,外键约束的列名一定要与主键的列名一样了)
--一般很少用,可读性也低,知道有就得了,记录一下
select * from 表名1 别名1 natural join 表名2 别名2;
内连接不会取出不符合条件的数据,比如表名1中某一行外键约束下的列的内容为null的话,则该行不会满足条件,内连接就不会取出它;
如果想取出,请使用外链接.

外链接

外链接分为左外和右外
左外,就是不管左面表的数据是否满足条件(就是on后面的条件),都查出来
右外,与左外同理,只不过是右面的表

--左外:
select * from 表名1 别名1 left outer join 表名2 别名2 on 别名1.xx=别名2.yy;

--右外:
select * from 表名1 别名1 right outer join 表名2 别名2 on 别名1.xx=别名2.yy;

--如果左右都想要,有一个叫全外的东西,不过mysql不支持
--但是可以将上两个语句,通过union连接,合并结果集的方式实现.
子查询

在一条SQL语句中有多个select的就是子查询.
子查询的本质就是,先查询出一个表(结果集),再在这张表上进行后续的查询操作.
标准中有两种写法:
写在from后面
写在where后面

--如果查询出的是单行单列的结果集,那么可以直接将该结果集作为判断条件
--id=1,会确定一行数据,age确定了一列,所以查出的是单行单列的数据,可以用这种方式作为where后面的判断条件
select * from 表名1 where 列名1>(select age from 表名1 where id=1);

--如果查询出的是多行多列的结果集,呢么可以直接将该结果集作为目标表来查询
select * from (select name,age from 表名2);

--如果查询出的是多行单列的结果集,那么可以将该结果集看成集合
-- 关键字all:表示大于该集合中所有的数据
select * from 表名1 where age >= all (select age from 表名1);


--in表示在集合中存在即可

--如果查询出的是单行多列的结果集,那么可以将该结果集看出一个对象(仅仅是看成,可以看出一个对象的多个属性)
--子查询可以查询名字为张三这一行的列1,列2的数据
--然后查询表名1中所有列1列2数据与张三的结果集相同的数据
select * from 表名1 where (列1,列2) in (select 列1,列2 from 表名1 where name='张三');
HTML:
超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言

    HTML 指的是超文本标记语言: HyperText Markup Language
    HTML 不是一种编程语言，而是一种标记语言
    标记语言是一套标记标签 (markup tag)
    HTML 使用标记标签来描述网页
    HTML 文档包含了HTML 标签及文本内容
    HTML文档也叫做 web 页面

HTML 标记标签通常被称为 HTML 标签 (HTML tag)。

    HTML 标签是由尖括号包围的关键词，比如 <html>
    HTML 标签通常是成对出现的，比如 <b> 和 </b>
    标签对中的第一个标签是开始标签，第二个标签是结束标签
    开始和结束标签也被称为开放标签和闭合标签

HTML 元素

"HTML 标签" 和 "HTML 元素" 通常都是描述同样的意思.

但是严格来讲, 一个 HTML 元素包含了开始标签与结束标签
 <!DOCTYPE> 声明

<!DOCTYPE>声明有助于浏览器中正确显示网页。

网络上有很多不同的文件，如果能够正确声明HTML的版本，浏览器就能正确显示网页内容
HTML 标题

HTML 标题（Heading）是通过<h1> - <h6> 标签来定义的.
HTML 段落

HTML 段落是通过标签 <p> 来定义的.
HTML 链接

HTML 链接是通过标签 <a> 来定义的.
HTML 图像

HTML 图像是通过标签 <img> 来定义的.
HTML 元素语法

    HTML 元素以开始标签起始
    HTML 元素以结束标签终止
    元素的内容是开始标签与结束标签之间的内容
    某些 HTML 元素具有空内容（empty content）
    空元素在开始标签中进行关闭（以开始标签的结束而结束）
    大多数 HTML 元素可拥有属性

嵌套的 HTML 元素

HTML 文档由嵌套的 HTML 元素构成
HTML 空元素

没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。

<br> 就是没有关闭标签的空元素（<br> 标签定义换行）。

在 XHTML、XML 以及未来版本的 HTML 中，所有元素都必须被关闭。

在开始标签中添加斜杠，比如 <br />，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式。

即使 <br> 在所有浏览器中都是有效的，但使用 <br /> 其实是更长远的保障
HTML 属性

    HTML 元素可以设置属性
    属性可以在元素中添加附加信息
    属性一般描述于开始标签
    属性总是以名称/值对的形式出现，比如：name="value"
    HTML 标题

    标题（Heading）是通过 <h1> - <h6> 标签进行定义的.

    <h1> 定义最大的标题。 <h6> 定义最小的标题
    标题很重要

    请确保将 HTML 标题 标签只用于标题。不要仅仅是为了生成粗体或大号的文本而使用标题。

    搜索引擎使用标题为您的网页的结构和内容编制索引。

    因为用户可以通过标题来快速浏览您的网页，所以用标题来呈现文档结构是很重要的。

    应该将 h1 用作主标题（最重要的），其后是 h2（次重要的），再其次是 h3，以此类推
    HTML 水平线

    <hr> 标签在 HTML 页面中创建水平线。

    hr 元素可用于分隔内容
    HTML 注释

    可以将注释插入 HTML 代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们
    HTML 段落

    段落是通过 <p> 标签定义的
    HTML 折行

    如果您希望在不产生一个新段落的情况下进行换行（新行），请使用 <br /> 标签
    HTML 输出- 使用提醒

    我们无法确定 HTML 被显示的确切效果。屏幕的大小，以及对窗口的调整都可能导致不同的结果。

    对于 HTML，您无法通过在 HTML 代码中添加额外的空格或换行来改变输出的效果。

    当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格
    HTML 格式化标签

    HTML 使用标签 <b>("bold") 与 <i>("italic") 对输出的文本进行格式, 如：粗体 or 斜体

    这些HTML标签被称为格式化标签
    通常标签 <strong> 替换加粗标签 <b> 来使用, <em> 替换 <i>标签使用。

    然而，这些标签的含义是不同的：

    <b> 与<i> 定义粗体或斜体文本。

    <strong> 或者 <em>意味着你要呈现的文本是重要的，所以要突出显示。现今所有主要浏览器都能渲染各种效果的字体。不过，未来浏览器可能会支持更好的渲染效果
    HTML 超链接（链接）

    HTML使用标签 <a>来设置超文本链接。

    超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。

    当您把鼠标指针移动到网页中的某个链接上时，箭头会变为一只小手。

    在标签<a> 中使用了href属性来描述链接的地址。

    默认情况下，链接将以以下形式出现在浏览器中：

        一个未访问过的链接显示为蓝色字体并带有下划线。
        访问过的链接显示为紫色并带有下划线。
        点击链接时，链接显示为红色并带有下划线。

        注意：如果为这些超链接设置了 CSS 样式，展示样式会根据 CSS 的设定而显示。
        HTML 链接语法

        链接的 HTML 代码很简单。它类似这样：
        <a href="url">链接文本</a>

        href 属性描述了链接的目标。.
        HTML 链接 - target 属性

        使用 target 属性，你可以定义被链接的文档在何处显示
        HTML 链接- id 属性

        id属性可用于创建在一个HTML文档书签标记。

        提示: 书签是不以任何特殊的方式显示，在HTML文档中是不显示的，所以对于读者来说是隐藏的
        HTML <head> 元素

        <head> 元素包含了所有的头部标签元素。在 <head>元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。

        可以添加在头部区域的元素标签为: <title>, <style>, <meta>, <link>, <script>, <noscript>, and <base>
         HTML <title> 元素

        <title> 标签定义了不同文档的标题。

        <title> 在 HTML/XHTML 文档中是必须的。

        <title> 元素:

            定义了浏览器工具栏的标题
            当网页添加到收藏夹时，显示在收藏夹中的标题
            显示在搜索引擎结果页面的标题
HTML <base> 元素

<base> 标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接
     HTML <link> 元素

    <link> 标签定义了文档与外部资源之间的关系。

    <link> 标签通常用于链接到样式表
    HTML <style> 元素

    <style> 标签定义了HTML文档的样式文件引用地址.

    在<style> 元素中你也可以直接添加样式来渲染 HTML 文档
    HTML <meta> 元素

    meta标签描述了一些基本的元数据。

    <meta> 标签提供了元数据.元数据也不显示在页面上，但会被浏览器解析。

    META 元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者，和其他元数据。

    元数据可以使用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他Web服务。

    <meta> 一般放置于 <head> 区域
    HTML <script> 元素

    <script>标签用于加载脚本文件，如： JavaScript。

    <script> 元素在以后的章节中会详细描述
    如何使用CSS

    CSS 是在 HTML 4 开始使用的,是为了更好的渲染HTML元素而引入的.

    CSS 可以通过以下方式添加到HTML中:

        内联样式- 在HTML元素中使用"style" 属性
        内部样式表 -在HTML文档头部 <head> 区域使用<style> 元素 来包含CSS
        外部引用 - 使用外部 CSS 文件

    最好的方式是通过外部引用CSS文件.

    在本站的HTML教程中我们使用了内联CSS样式来介绍实例，这是为了简化的例子，也使得你能更容易在线编辑代码并在线运行实例
    如何使用CSS

    CSS 是在 HTML 4 开始使用的,是为了更好的渲染HTML元素而引入的.

    CSS 可以通过以下方式添加到HTML中:

        内联样式- 在HTML元素中使用"style" 属性
        内部样式表 -在HTML文档头部 <head> 区域使用<style> 元素 来包含CSS
        外部引用 - 使用外部 CSS 文件
内联样式

当特殊的样式需要应用到个别元素时，就可以使用内联样式。 使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。以下实例显示出如何改变段落的颜色和左外边距
内部样式表

当单个文件需要特别样式时，就可以使用内部样式表。你可以在<head> 部分通过 <style>标签定义内部样式表
外部样式表

当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观
HTML 图像- 图像标签（ <img>）和源属性（Src）

在 HTML 中，图像由<img> 标签定义。

<img> 是空标签，意思是说，它只包含属性，并且没有闭合标签。

要在页面上显示图像，你需要使用源属性（src）。src 指 "source"。源属性的值是图像的 URL 地址
 HTML 图像- Alt属性

alt 属性用来为图像定义一串预备的可替换的文本。

替换文本属性的值是用户定义的
 HTML 图像- 设置图像的高度与宽度

height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。

属性值默认单位为像素
HTML 表格

表格由 <table> 标签来定义。每个表格均有若干行（由 <tr> 标签定义），每行被分割为若干单元格（由 <td> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等
HTML 表格和边框属性

如果不定义边框属性，表格将不显示边框。有时这很有用，但是大多数时候，我们希望显示边框。

使用边框属性来显示一个带有边框的表格
HTML 表格表头

表格的表头使用 <th> 标签进行定义。

大多数浏览器会把表头显示为粗体居中的文本
HTML无序列表

无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。

无序列表使用 <ul> 标签
HTML 有序列表

同样，有序列表也是一列项目，列表项目使用数字进行标记。 有序列表始于 <ol> 标签。每个列表项始于 <li> 标签。

列表项项使用数字来标记
HTML 自定义列表

自定义列表不仅仅是一列项目，而是项目及其注释的组合。

自定义列表以 <dl> 标签开始。每个自定义列表项以 <dt> 开始。每个自定义列表项的定义以 <dd> 开始
HTML 区块元素

大多数 HTML 元素被定义为块级元素或内联元素。

块级元素在浏览器显示时，通常会以新行来开始（和结束）
HTML 内联元素

内联元素在显示时通常不会以新行开始
HTML <div> 元素

HTML <div> 元素是块级元素，它可用于组合其他 HTML 元素的容器。

<div> 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。

如果与 CSS 一同使用，<div> 元素可用于对大的内容块设置样式属性。

<div> 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 <table> 元素进行文档布局不是表格的正确用法。<table> 元素的作用是显示表格化的数据。
HTML <span> 元素

HTML <span> 元素是内联元素，可用作文本的容器

<span> 元素也没有特定的含义。

当与 CSS 一同使用时，<span> 元素可用于为部分文本设置样式属性
HTML 表单

表单是一个包含表单元素的区域。

表单元素是允许用户在表单中输入内容,比如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。

表单使用表单标签 <form> 来设置
HTML 表单 - 输入元素

多数情况下被用到的表单标签是输入标签（<input>）
文本域（Text Fields）

文本域通过<input type="text"> 标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域
密码字段

密码字段通过标签<input type="password"> 来定义
单选按钮（Radio Buttons）

<input type="radio"> 标签定义了表单单选框选项
复选框（Checkboxes）

<input type="checkbox"> 定义了复选框. 用户需要从若干给定的选择中选取一个或若干选项
提交按钮(Submit Button)

<input type="submit"> 定义了提交按钮.

当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理
JDBC API 允许用户访问任何形式的表格数据，尤其是存储在关系数据库中的数据。

执行流程：

    连接数据源，如：数据库。

    为数据库传递查询和更新指令。

    处理数据库响应并返回的结果
    JDBC 架构

    分为双层架构和三层架构
    双层
    Two-tier-Architecture-for-Data-Access

    作用：此架构中，Java Applet 或应用直接访问数据源。

    条件：要求 Driver 能与访问的数据库交互。

    机制：用户命令传给数据库或其他数据源，随之结果被返回。

    部署：数据源可以在另一台机器上，用户通过网络连接，称为 C/S配置（可以是内联网或互联网）
    三层
    Three-tier-Architecture-for-Data-Access

    侧架构特殊之处在于，引入中间层服务。

    流程：命令和结构都会经过该层。

    吸引：可以增加企业数据的访问控制，以及多种类型的更新；另外，也可简化应用的部署，并在多数情况下有性能优势。

    历史趋势： 以往，因性能问题，中间层都用 C 或 C++ 编写，随着优化编译器（将 Java 字节码 转为 高效的 特定机器码）和技术的发展，如EJB，Java 开始用于中间层的开发这也让 Java 的优势突显出现出来，使用 Java 作为服务器代码语言，JDBC随之被重视

    JDBC 编程步骤

    加载驱动程序：

    Class.forName(driverClass)
    //加载MySql驱动
    Class.forName("com.mysql.jdbc.Driver")
    //加载Oracle驱动
    Class.forName("oracle.jdbc.driver.OracleDriver")

    获得数据库连接：

    DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/imooc", "root", "root");

    创建Statement\PreparedStatement对象：

    conn.createStatement();
    conn.prepareStatement(sql)
    什么是 CSS?

        CSS 指层叠样式表 (Cascading Style Sheets)
        样式定义如何显示 HTML 元素
        样式通常存储在样式表中
        把样式添加到 HTML 4.0 中，是为了解决内容与表现分离的问题
        外部样式表可以极大提高工作效率
        外部样式表通常存储在 CSS 文件中
        多个样式定义可层叠为一

CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明
选择器通常是您需要改变样式的 HTML 元素。

每条声明由一个属性和一个值组成。

属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开
id 和 class 选择器

如果你要在HTML元素中设置CSS样式，你需要在元素中设置"id" 和 "class"选择器
id 选择器

id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。

HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 "#" 来定义
class 选择器

class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。

class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点"."号显示：

在以下的例子中，所有拥有 center 类的 HTML 元素均为居中
如何插入样式表

插入样式表的方法有三种:

    外部样式表(External style sheet)
    内部样式表(Internal style sheet)
    内联样式(Inline style)

外部样式表

当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 <link> 标签链接到样式表。 <link> 标签在（文档的）头部
浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。

外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 html 标签。样式表应该以 .css 扩展名进行保存
内部样式表

当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <style> 标签在文档头部定义内部样式表
内联样式

由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。

要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性
多重样式

如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来。

多重样式优先级

样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。

一般情况下，优先级如下：

内联样式）Inline style > （内部样式）Internal style sheet >（外部样式）External style sheet > 浏览器默认样式
CSS 背景属性用于定义HTML元素的背景。

CSS 属性定义背景效果:

    background-color
    background-image
    background-repeat
    background-attachment
    background-position

CSS 文本格式
 文本颜色

颜色属性被用来设置文字的颜色。

颜色是通过CSS最经常的指定：

    十六进制值 - 如: ＃FF0000
    一个RGB值 - 如: RGB(255,0,0)
    颜色的名称 - 如: red

文本的对齐方式

文本排列属性是用来设置文本的水平对齐方式。

文本可居中或对齐到左或右,两端对齐.

当text-align设置为"justify"，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）
文本修饰

text-decoration 属性用来设置或删除文本的装饰。

从设计的角度看 text-decoration属性主要是用来删除链接的下划线
文本转换

文本转换属性是用来指定在一个文本中的大写和小写字母。

可用于所有字句变成大写或小写字母，或每个单词的首字母大写
文本缩进

文本缩进属性是用来指定文本的第一行的缩进
CSS 字体
CSS字体属性定义字体，加粗，大小，文字样式
CSS字型

在CSS中，有两种类型的字体系列名称：

    通用字体系列 - 拥有相似外观的字体系统组合（如 "Serif" 或 "Monospace"）
    特定字体系列 - 一个特定的字体系列（如 "Times" 或 "Courier"）

字体系列

font-family 属性设置文本的字体系列。

font-family 属性应该设置几个字体名称作为一种"后备"机制，如果浏览器不支持第一种字体，他将尝试下一种字体。

注意: 如果字体系列的名称超过一个字，它必须用引号，如Font Family："宋体"。

多个字体系列是用一个逗号分隔指明
字体样式

主要是用于指定斜体文字的字体样式属性。

这个属性有三个值：

    正常 - 正常显示文本
    斜体 - 以斜体字显示的文字
    倾斜的文字 - 文字向一边倾斜（和斜体非常类似，但不太支持）

字体大小

font-size 属性设置文本的大小。

能否管理文字的大小，在网页设计中是非常重要的。但是，你不能通过调整字体大小使段落看上去像标题，或者使标题看上去像段落。

请务必使用正确的HTML标签，就<h1> - <h6>表示标题和<p>表示段落：

字体大小的值可以是绝对或相对的大小。

绝对大小：

    设置一个指定大小的文本
    不允许用户在所有浏览器中改变文本大小
    确定了输出的物理尺寸时绝对大小很有用

相对大小：

    相对于周围的元素来设置大小
    允许用户在浏览器中改变文字大小

链接的样式，可以用任何CSS属性（如颜色，字体，背景等）。

特别的链接，可以有不同的样式，这取决于他们是什么状态。

这四个链接状态是：

    a:link - 正常，未访问过的链接
    a:visited - 用户已访问过的链接
    a:hover - 当用户鼠标放在链接上时
    a:active - 链接被点击的那一刻

当设置为若干链路状态的样式，也有一些顺序规则：

    a:hover 必须跟在 a:link 和 a:visited后面
    a:active 必须跟在 a:hover后面

CSS列表属性作用如下：

    设置不同的列表项标记为有序列表
    设置不同的列表项标记为无序列表
    设置列表项标记为图像

列表

在HTML中，有两种类型的列表：

    无序列表 - 列表项标记用特殊图形（如小黑点、小方框等）
    有序列表 - 列表项的标记有数字或字母

使用CSS，可以列出进一步的样式，并可用图像作列表项标记
CSS Positioning(定位)
position 属性指定了元素的定位类型。

position 属性的四个值：

    static
    relative
    fixed
    absolute

元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，除非是先设定position属性。他们也有不同的工作方式，这取决于定位方法
static 定位

HTML元素的默认值，即没有定位，元素出现在正常的流中。

静态定位的元素不会受到 top, bottom, left, right影响
fixed 定位

元素的位置相对于浏览器窗口是固定位置。

即使窗口是滚动的它也不会移动
relative 定位

相对定位元素的定位是相对其正常位置
absolute 定位

绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html>
重叠的元素

元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素

z-index属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面）

一个元素可以有正数或负数的堆叠顺序
CSS Float(浮动)
CSS 的 Float（浮动），会使元素向左或向右移动，其周围的元素也会重新排列。

Float（浮动），往往是用于图像，但它在布局时一样非常有用
元素怎样浮动

元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。

一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。

浮动元素之后的元素将围绕它。

浮动元素之前的元素将不会受到影响。
清除浮动 - 使用 clear

元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。

clear 属性指定元素两侧不能出现浮动元素。

CSS组合选择符包括各种简单选择符的组合方式。

在 CSS3 中包含了四种组合方式:

    后代选取器(以空格分隔)
    子元素选择器(以大于号分隔）
    相邻兄弟选择器（以加号分隔）
    普通兄弟选择器（以破折号分隔）
后代选取器

后代选取器匹配所有值得元素的后代元素
子元素选择器

与后代选择器相比，子元素选择器（Child selectors）只能选择作为某元素子元素的元素
相邻兄弟选择器

相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。

如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）
后续兄弟选择器

后续兄弟选择器选取所有指定元素之后的相邻兄弟元素。

以下实例选取了所有 <div> 元素之后的所有相邻兄弟元素 <p>
CSS伪类是用来添加一些选择器的特殊效果
语法

伪类的语法：
selector:pseudo-class {property:value;}

CSS类也可以使用伪类：
selector.class:pseudo-class {property:value;}
anchor伪类

在支持 CSS 的浏览器中，链接的不同状态都可以以不同的方式显示
伪类和CSS类

伪类可以与 CSS 类配合使用：
a.red:visited {color:#FF0000;}

<a class="red" href="css-syntax.html">CSS 语法</a>

如果在上面的例子的链接已被访问，它会显示为红色
CSS - :first - child伪类

您可以使用 :first-child 伪类来选择元素的第一个子元素

注意：在IE8的之前版本必须声明<!DOCTYPE> ，这样 :first-child 才能生效
匹配第一个 <p> 元素

在下面的例子中，选择器匹配作为任何元素的第一个子元素的 <p> 元素
匹配所有<p> 元素中的第一个 <i> 元素

在下面的例子中，选择相匹配的所有<p>元素的第一个 <i> 元素
匹配所有作为第一个子元素的 <p> 元素中的所有 <i> 元素

在下面的例子中，选择器匹配所有作为元素的第一个子元素的 <p> 元素中的所有 <i> 元素






